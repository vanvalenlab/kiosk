# FIXME: GPU AZs and GKE AZ might not be same

#export CLOUDSDK_CONFIG=/localhost/.config/gcloud/

# https://cloud.google.com/kubernetes-engine/docs/quickstart
# https://cloud.google.com/compute/docs/machine-types
# https://cloud.google.com/compute/pricing
#
# Increase quotas: https://console.cloud.google.com/iam-admin/quotas

## Login to Google Cloud
gke/test/login:
	@gcloud-login.sh

## Create a new project
gke/test/create/project:
	@gcloud projects create $(CLOUDSDK_CORE_PROJECT)
#	@gcloud alpha billing accounts projects link $(CLOUDSDK_CORE_PROJECT --account-id=$(BILLING_ACCOUNT_ID)

## Destroy project
gke/test/destroy/project:
	@gcloud projects delete $(CLOUDSDK_CORE_PROJECT)

## Create a new GKE cluster
gke/test/create/cluster:
	@echo "Creating GKE cluster..."
	@echo "Using the following command: "
	@gcloud container clusters create $(CLUSTER_NAME) \
		--service-account=$(GCP_SERVICE_ACCOUNT) \
		--region=$(CLOUDSDK_COMPUTE_REGION) \
		--node-locations=$(REGION_ZONES_WITH_GPUS) \
		--max-nodes=$(NODE_MAX_SIZE) \
		--min-nodes=$(NODE_MIN_SIZE) \
		--machine-type=$(GKE_MACHINE_TYPE) \
		--cluster-version $(KUBERNETES_VERSION) \
		--enable-autoscaling \
		--no-enable-autoupgrade
	@echo "GKE cluster creation complete."
	@echo " "
	@echo " "

## Destroy GKE cluster
gke/test/destroy/cluster:
	@echo "Destroying cluster..."
	@-gcloud container clusters --region $(CLOUDSDK_COMPUTE_REGION) delete $(CLUSTER_NAME) --quiet
	@echo "Cluster destruction finished."
	@echo " "
	@echo " "

## Set context to use GKE cluster (e.g. with kubectl)
gke/test/use/cluster:
	@gcloud config set project $(CLOUDSDK_CORE_PROJECT)
	@gcloud container clusters get-credentials $(CLUSTER_NAME)
	@gcloud config set compute/region $(CLOUDSDK_COMPUTE_REGION)

## List all GKE projects
gke/test/list/projects:
	@gcloud projects list

## List all availability zones
gke/test/list/zones:
	@gcloud compute zones list

## List all accelerator machine types
gke/test/list/accelerator-types:
	@gcloud compute accelerator-types list

## List all billing accounts
gke/test/list/billing-accounts:
	@gcloud alpha billing accounts list

## Node pool creation
gke/test/create/consumer-node-pool:
	@echo "Creating consumer CPU node pool..."
	@echo "Using the following command: "
	gcloud container node-pools create consumer-cpu \
		--cluster $(CLUSTER_NAME) \
		--service-account=$(GCP_SERVICE_ACCOUNT) \
		--region $(CLOUDSDK_COMPUTE_REGION) \
		--num-nodes 1 \
		--min-nodes 1 \
		--max-nodes ${NODE_MAX_SIZE} \
		--machine-type=${CONSUMER_MACHINE_TYPE} \
		--enable-autoscaling \
		--enable-autorepair \
		--no-enable-autoupgrade \
		--preemptible \
		--node-labels consumer=yes \
		--node-taints consumer=yes:NoSchedule

gke/test/create/prediction-node-pool:
	@echo "Creating prediction GPU node pool..."
	@echo "Using the following command: "
	gcloud container node-pools create prediction-gpu \
		--cluster $(CLUSTER_NAME) \
		--service-account=$(GCP_SERVICE_ACCOUNT) \
		--accelerator type=$(GCP_PREDICTION_GPU_TYPE),count=$(GPU_PER_NODE) \
		--region $(CLOUDSDK_COMPUTE_REGION) \
		--num-nodes $(GPU_NODE_MIN_SIZE) \
		--min-nodes $(GPU_NODE_MIN_SIZE) \
		--max-nodes $(GPU_NODE_MAX_SIZE) \
		--machine-type=$(GPU_MACHINE_TYPE) \
		--enable-autoscaling \
		--enable-autorepair \
		--no-enable-autoupgrade \
		--preemptible \
		--node-taints prediction_gpu=yes:NoSchedule

gke/test/create/training-node-pool:
	@echo "Creating training GPU node pool..."
	@echo "Using the following command: "
	gcloud container node-pools create training-gpu \
		--cluster $(CLUSTER_NAME) \
		--accelerator type=$(GCP_TRAINING_GPU_TYPE),count=$(GPU_PER_NODE) \
		--service-account=$(GCP_SERVICE_ACCOUNT) \
		--region $(CLOUDSDK_COMPUTE_REGION) \
		--num-nodes $(GPU_NODE_MIN_SIZE) \
		--min-nodes $(GPU_NODE_MIN_SIZE) \
		--max-nodes $(GPU_NODE_MAX_SIZE) \
		--machine-type=$(GPU_MACHINE_TYPE) \
		--enable-autoscaling \
		--enable-autorepair \
		--no-enable-autoupgrade \
		--node-taints training_gpu=yes:NoSchedule

# https://cloud.google.com/kubernetes-engine/docs/how-to/gpus
## Create GKE GPU node pool
#		--enable-autoupgrade
gke/test/create/node-pools: \
	gke/test/create/consumer-node-pool \
	gke/test/create/prediction-node-pool
	# gke/create/training-node-pool
	@echo "All node pools created."
	@echo " "
	@echo " "

gke/test/create/elk-node-pools:
	#@shopt -s nocasematch
	@if [ "${ELK_DEPLOYMENT_TOGGLE}" = "ON" ]; then\
		echo "Creating elasticsearch CPU node pool...";\
		echo "Using the following command: ";\
		gcloud container node-pools create elasticsearch-cpu \
			--cluster $(CLUSTER_NAME) \
			--service-account=$(GCP_SERVICE_ACCOUNT) \
			--region $(CLOUDSDK_COMPUTE_REGION) \
			--num-nodes 2 \
			--min-nodes 1 \
			--max-nodes 2 \
			--machine-type=n1-highmem-2 \
			--enable-autoscaling \
			--enable-autorepair \
			--no-enable-autoupgrade \
			--preemptible \
			--node-labels elasticsearch_data=yes \
			--node-taints elasticsearch_data=yes:NoSchedule; \
		echo "Creating logstash CPU node pool..."; \
		echo "Using the following command: "; \
		gcloud container node-pools create logstash-cpu \
			--cluster $(CLUSTER_NAME) \
			--service-account=$(GCP_SERVICE_ACCOUNT) \
			--region $(CLOUDSDK_COMPUTE_REGION) \
			--num-nodes 3 \
			--min-nodes 1 \
			--max-nodes 20 \
			--machine-type=n1-highmem-2 \
			--enable-autoscaling \
			--enable-autorepair \
			--no-enable-autoupgrade \
			--preemptible \
			--node-labels logstash=yes \
			--node-taints logstash=yes:NoSchedule; \
		echo "ELK node pools created."; \
	else\
		echo "ELK stack is disabled.";\
	fi
	#@shopt -u nocasematch

# https://cloud.google.com/kubernetes-engine/docs/how-to/gpus#gpu_pool
# When you add a GPU node pool to an existing cluster that already runs a non-GPU
# node pool, GKE automatically taints the GPU nodes with the following node taint
#		--node-taints "nvidia.com/gpu=:NoSchedule"

## Destroy GKE GPU node pool
gke/test/destroy/node-pools:
	@echo "Destroying node pools."
	@echo "Depending on cluster state, this process could take a while."
	$(CONF_PATH_PREFIX)/conf/patches/gke-node-pool-destruction-TEST.sh
	@echo "Node pools destroyed."
	@echo " "
	@echo " "

## Destroy Orphaned GKE persistent disks
gke/test/destroy/pds:
	@echo "Destroying orphaned persistent disks."
	$(CONF_PATH_PREFIX)/conf/patches/gke-pd-destruction-TEST.sh
	@echo "Orphaned persistent disks destroyed."
	@echo " "
	@echo " "

# https://cloud.google.com/storage/docs/access-control/iam-roles
# Currently, using Editor and Kubernetes Engine Admin roles for the testing-ci service account.
# It might be possible to replace Editor with someting more specific, but more research would be needed.
## Create Service Account used by deepcell
gke/test/create/service-account:
	@echo "Creating GKE service account..."
	@gcloud auth activate-service-account $(GCP_SERVICE_ACCOUNT) --key-file=$(CONF_PATH_PREFIX)/gcloud_key.json
	@echo "GKE service account creation complete."
	@echo " "
	@echo " "

## Create bucket used by deepcell
gke/test/create/bucket:
	@echo "Creating Google Cloud Storage Bucket ${CLOUDSDK_CORE_PROJECT}..."
	@gsutil mb -p $(CLOUDSDK_CORE_PROJECT) gs://$(CLOUDSDK_BUCKET) \
		|| echo "Bucket ${CLOUDSDK_CODE_PROJECT} already exists. No need to create that bucket."
	@-gsutil acl ch -u $(GCP_SERVICE_ACCOUNT):O gs://$(CLOUDSDK_BUCKET)
	@echo "Google Cloud Storage Bucket creation finished."
	@echo " "
	@echo " "

## Destroy bucket used by deepcell
gke/test/destroy/bucket:
	gsutil rm -r gs://$(CLOUDSDK_BUCKET) || echo "Bucket not destroyed."

## Deploy helm tiller with service account
gke/test/deploy/helm:
	@echo "Deploying kubernetes resources..."
	@kubectl create serviceaccount --namespace kube-system tiller || echo "Kubernetes already appears to be deployed."
	@-kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
	@-helm init --service-account tiller --upgrade --wait
	@echo "Kubernetes resource deployment finished."
	@echo " "
	@echo " "

gke/test/destroy/helm:
	-helm reset --force --tiller-connection-timeout=2
	-kubectl delete clusterrolebinding tiller-cluster-rule
	-kubectl delete serviceaccount --namespace kube-system tiller

## Deploy GKE Nvidia drivers
gke/test/deploy/nvidia:
	@echo "Deploying NVIDIA drivers for GPU instances..."
	@kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/container-engine-accelerators/master/nvidia-driver-installer/cos/daemonset-preloaded.yaml || \
		echo "These drivers are not being installed. They may already be installed."
	@echo "NVIDIA GPU driver deployment finished."
	@echo " "
	@echo " "

## Create Cluster
gke/test/create/all: \
	gke/test/create/service-account \
	gke/test/create/cluster \
	gke/test/create/node-pools \
	gke/test/create/elk-node-pools \
	gke/test/create/bucket \
	gke/test/deploy/helm \
	gke/test/deploy/nvidia
	@echo "GKE cluster created"
	@exit 0

## Destroy Cluster
gke/test/destroy/all: \
	gke/test/destroy/node-pools \
	gke/test/destroy/cluster \
	gke/test/destroy/pds
	@echo "GKE cluster destroyed"
	@exit 0
