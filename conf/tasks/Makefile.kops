SSH_KEY ?= $(CACHE_PATH)/id_rsa
SSH_PUBLIC_KEY ?= $(SSH_KEY).pub

## Create SSH key for Kops cluster
kops/create/ssh-key:
	@if [ ! -d "$(CACHE_PATH)" ]; \
	then \
	    echo "It looks like you haven't run a cloud provider configuration yet."; \
	    echo "At the very least the CACHE_PATH directory, " $(CACHE_PATH) ", does not exist."; \
	    exit 1; \
	fi
	@echo "Generating public/private RSA key pair..."
	@ssh-keygen -t rsa -f $(SSH_KEY) -N "" > /dev/null || echo "Nevermind. The keys probably already exist."
	@echo " "

## Destroy SSH key for Kops cluster
kops/destroy/ssh-key:
	@echo "Deleting cluster SSH key pair."
	@rm -f $(SSH_KEY) $(SSH_PUBLIC_KEY) || echo "It looks like no SSH key pair was found in the first place?"
	@echo " "

## Provision kops cluster
kops/create/cluster:
	@echo "Requisitioning cloud resources using kops (Kubernetes Operations)..."
	@echo "Using the following command:"
	@echo "  kops create cluster \\"
	@echo "    --name $(KOPS_CLUSTER_NAME) \\"
	@echo "    --zones $(KOPS_AVAILABILITY_ZONES) \\"
	@echo "    --cloud $(CLOUD_PROVIDER) \\"
	@echo "    --master-size $(MASTER_MACHINE_TYPE) \\"
	@echo "    --node-size $(NODE_MACHINE_TYPE) \\"
	@echo "    --ssh-public-key $(SSH_PUBLIC_KEY) \\"
	@echo "    --yes"
	@kops create cluster \
	  --name $(KOPS_CLUSTER_NAME) \
	  --zones $(KOPS_AVAILABILITY_ZONES) \
	  --cloud $(CLOUD_PROVIDER)  \
	  --master-size $(MASTER_MACHINE_TYPE) \
	  --node-size $(NODE_MACHINE_TYPE) \
	  --ssh-public-key $(SSH_PUBLIC_KEY) \
	  --yes \
	  2> /dev/null || echo "Well, I guess this cluster already exists, so we're not recreating it."
	@echo " "

kops/create/aws:
	@echo "Briefly restarting the AWS cluster in order to add some necessary permissions to it..."
	@kops get cluster -o yaml > /tmp/cluster-template.yaml
	@yq merge -x /tmp/cluster-template.yaml patches/aws.yaml > /tmp/cluster.yaml
	@kops replace -f /tmp/cluster.yaml
	@kops update cluster --yes &> /dev/null
	@echo "Done."
	@echo " "

## Provision GPU instance group
kops/create/gpu-nodes: GPU_NODES_EXIST = $(shell sh -c "kops get ig | grep 'gpu-nodes'" )
kops/create/gpu-nodes:
	@echo "Creating GPU node pool."
	@echo "(Not requisitioning GPUs now, just granting Kubernetes the ability to get them once they're needed.)"
	@if [[ -z "${GPU_NODES_EXIST}" ]]; then \
		kops create ig gpu-nodes -o yaml --dry-run > /tmp/gpu-nodes-template.yaml; \
		yq merge -x /tmp/gpu-nodes-template.yaml patches/gpu-nodes.yaml > /tmp/gpu-nodes.yaml; \
		kops create -f /tmp/gpu-nodes.yaml; \
		kops update cluster --yes; \
	else \
		echo "GPU node pool already exists. Moving on."; \
	fi
	@echo " "

## Destroy GPU instance group
kops/destroy/gpu-nodes:
	kops delete ig gpu-nodes --yes
	kops update cluster --yes

## Provision all kops resources
kops/create/all: \
  kops/create/ssh-key \
  kops/create/cluster \
  kops/create/$(CLOUD_PROVIDER) \
  kops/create/gpu-nodes 
	@echo "Kops created"
	@echo " "

## Destroy kops cluster
kops/destroy/cluster:
	@echo "Destroying kops cluster ${KOPS_CLUSTER_NAME}."
	@kops delete cluster --name $(KOPS_CLUSTER_NAME) --yes 2> /dev/null || \
		echo "Apparently, the cluster is already nonexistent."
	@echo " "

## Destroy all kops resources
kops/destroy/all: \
  kops/destroy/cluster \
  kops/destroy/ssh-key
	@echo "Kops destroyed"
	@echo " "

## Wait for kops cluster to come online
kops/wait:
	@echo "Waiting for kops cluster to come online..."
	@time wait-for-kops

