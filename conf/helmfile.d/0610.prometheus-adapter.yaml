helmDefaults:
  args:
    - "--wait"
    - "--timeout=600"
    - "--force"
    - "--reset-values"

releases:

################################################################################
## prometheus-adapter                                                         ##
## exports data for the cutom metrics API                                     ##
################################################################################

#
# References:
#   - https://github.com/helm/charts/tree/master/stable/prometheus-adapter
#   - https://github.com/DirectXMan12/k8s-prometheus-adapter
#
- name: "prometheus-adapter"
  namespace: "monitoring"
  labels:
    chart: "prometheus-adapter"
    repo: "stable"
    component: "monitoring"
    namespace: "monitoring"
    vendor: "coreos"
    default: "true"
  chart: "stable/prometheus-adapter"
  version: "v0.5.0"
  wait: true
  values:
    - affinity: {}

      logLevel: 4

      metricsRelistInterval: 1m

      nodeSelector: {}

      # Url to access prometheus
      prometheus:
        url: http://prometheus-operator-prometheus
        port: 9090

      replicas: 1

      rbac:
        # Specifies whether RBAC resources should be created
        create: true

      serviceAccount:
        # Specifies whether a service account should be created
        create: true
        # The name of the service account to use.
        # If not set and create is true, a name is generated using the fullname template
        name:

      resources: {}
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
        # limits:
        #   cpu: 100m
        #   memory: 128Mi

      rules:
        default: true
        custom:
          # - seriesQuery: '{__name__=":tensorflow:core:direct_session_runs"}'
          #   resources:
          #     template: <<.Resource>>
          #   name:
          #     matches: ""
          #     as: "tensorflow_serving_runs"
          #   metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[1m])) by (<<.GroupBy>>)
          # - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
          #   seriesFilters: []
          #   resources:
          #     overrides:
          #       namespace:
          #         resource: namespace
          #       pod_name:
          #         resource: pod
          #   name:
          #     matches: ^container_(.*)_seconds_total$
          #     as: ""
          #   metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[1m])) by (<<.GroupBy>>)
          # - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
          #   seriesFilters:
          #   - isNot: ^container_.*_seconds_total$
          #   resources:
          #     overrides:
          #       namespace:
          #         resource: namespace
          #       pod_name:
          #         resource: pod
          #   name:
          #     matches: ^container_(.*)_total$
          #     as: ""
          #   metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}[1m])) by (<<.GroupBy>>)
          # - seriesQuery: '{__name__=~"^container_.*",container_name!="POD",namespace!="",pod_name!=""}'
          #   seriesFilters:
          #   - isNot: ^container_.*_total$
          #   resources:
          #     overrides:
          #       namespace:
          #         resource: namespace
          #       pod_name:
          #         resource: pod
          #   name:
          #     matches: ^container_(.*)$
          #     as: ""
          #   metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container_name!="POD"}) by (<<.GroupBy>>)
          # - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
          #   seriesFilters:
          #   - isNot: .*_total$
          #   resources:
          #     template: <<.Resource>>
          #   name:
          #     matches: ""
          #     as: ""
          #   metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
          # - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
          #   seriesFilters:
          #   - isNot: .*_seconds_total
          #   resources:
          #     template: <<.Resource>>
          #   name:
          #     matches: ^(.*)_total$
          #     as: ""
          #   metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
          # - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
          #   seriesFilters: []
          #   resources:
          #     template: <<.Resource>>
          #   name:
          #     matches: ^(.*)_seconds_total$
          #     as: ""
          #   metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
          # resourceRules:
          #   cpu:
          #     containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
          #     nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[1m])) by (<<.GroupBy>>)
          #     resources:
          #       overrides:
          #         instance:
          #           resource: node
          #         namespace:
          #           resource: namespace
          #         pod_name:
          #           resource: pod
          #     containerLabel: container_name
          #   memory:
          #     containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
          #     nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
          #     resources:
          #       overrides:
          #         instance:
          #           resource: node
          #         namespace:
          #           resource: namespace
          #         pod_name:
          #           resource: pod
          #     containerLabel: container_name
          #   window: 1m

        # Mounts a configMap with pre-generated rules for use. Overrides the
        # default, custom and external entries
        existing:
        external: []
      # - seriesQuery: '{__name__=~"^some_metric_count$"}'
      #   resources:
      #     template: <<.Resource>>
      #   name:
      #     matches: ""
      #     as: "my_custom_metric"
      #   metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)

      service:
        annotations: {}
        port: 443
        type: ClusterIP

      tls:
        enable: false
        ca: |-
          # Public CA file that signed the APIService
        key: |-
          # Private key of the APIService
        certificate: |-
          # Public key of the APIService

      tolerations: []
