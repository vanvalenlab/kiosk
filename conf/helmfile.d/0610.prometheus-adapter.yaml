helmDefaults:
  args:
    - "--wait"
    - "--timeout=600"
    - "--force"
    - "--reset-values"

releases:

################################################################################
## prometheus-adapter                                                         ##
## exports data for the cutom metrics API                                     ##
################################################################################

#
# References:
#   - https://github.com/helm/charts/tree/master/stable/prometheus-adapter
#   - https://github.com/DirectXMan12/k8s-prometheus-adapter
#
- name: "prometheus-adapter"
  namespace: "monitoring"
  labels:
    chart: "prometheus-adapter"
    repo: "stable"
    component: "monitoring"
    namespace: "monitoring"
    vendor: "coreos"
    default: "true"
  chart: "stable/prometheus-adapter"
  version: "v0.5.0"
  wait: true
  values:
    - affinity: {}

      logLevel: 4

      metricsRelistInterval: 1m

      nodeSelector: {}

      # Url to access prometheus
      prometheus:
        url: http://prometheus.default.svc
        port: 9090

      replicas: 1

      rbac:
        # Specifies whether RBAC resources should be created
        create: true

      serviceAccount:
        # Specifies whether a service account should be created
        create: true
        # The name of the service account to use.
        # If not set and create is true, a name is generated using the fullname template
        name:

      resources: {}
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
        # limits:
        #   cpu: 100m
        #   memory: 128Mi

      rules:
        default: true
        custom: []
      # - seriesQuery: '{__name__=~"^some_metric_count$"}'
      #   resources:
      #     template: <<.Resource>>
      #   name:
      #     matches: ""
      #     as: "my_custom_metric"
      #   metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
        # Mounts a configMap with pre-generated rules for use. Overrides the
        # default, custom and external entries
        existing:
        external: []
      # - seriesQuery: '{__name__=~"^some_metric_count$"}'
      #   resources:
      #     template: <<.Resource>>
      #   name:
      #     matches: ""
      #     as: "my_custom_metric"
      #   metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)

      service:
        annotations: {}
        port: 443
        type: ClusterIP

      tls:
        enable: false
        ca: |-
          # Public CA file that signed the APIService
        key: |-
          # Private key of the APIService
        certificate: |-
          # Public key of the APIService

      tolerations: []
